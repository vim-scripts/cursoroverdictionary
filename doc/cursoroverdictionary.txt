*cursoroverdictionary.txt*	辞書引き+αスクリプト

Last change: 2009 Oct 09
Version : 0.0.9
Copyright (C) 2009 ampmmn <http://d.hatena.ne.jp/ampmmn>

目次:
  これは何か................|cod-introduction|
  基本的な使い方............|cod-usage|
  コマンド..................|cod-function|
  グローバル変数............|cod-variables|
  マッピング................|cod-mapping|
  外部検索エンジンの登録....|cod-register-external|
  オペレータ登録............|cod-operator|
  CHANGELOG.................|cod-changelog|

==============================================================================
これは何か				*cod-introduction*

PDICテキスト形式，またはPDIC1行テキスト形式の辞書データを使って、
カーソル上にある単語を引くためのスクリプトです。
辞書データは、英辞郎から変換したもの、またはGENE辞書を使うことを主に想定しています。

Firefoxの素敵なアドオン「Mouseover Dictionary」のアイデアをそのままVim上に
持ってきた、という代物です。
http://maru.bonyari.jp/mouseoverdictionary/

Mouseover Dictionaryはマウスオーバーした単語を表示する、というものですが、
このスクリプトでは、カーソル上にある単語を表示します。
また、0.0.5以降では外部の検索エンジンを指定することで、
指定したWebサイトから単語の意味を検索することができるようになりました。

できること
- カーソル上の単語の意味をカーソル移動に追従して自動で表示
- ビジュアルモードで選択した単語・語句を(内部データベース|外部Webサイト)から検索
- コマンドラインから指定した単語・語句を(内部データベース|外部Webサイト)から検索

必要な環境・物:
- Vim 7.0以降

(カーソルオーバー辞書機能を利用する場合)
- +pythonオプション(sqlite3、またはsqliteパッケージが利用可能であること)
- 取り込むためのPDIC1行辞書データ(英辞郎,GENE辞書など)
- HDD空き容量(環境・使用する辞書により異なります。200MBくらいあると安心)

(外部検索機能を利用する場合)
- cURL(パスを設定しておく必要があります)

(operator-userを使ってoperator登録する場合)
- operator-user(http://www.vim.org/scripts/script.php?script_id=2692)

==============================================================================
基本的な使い方				*cod-usage*

1. 辞書データの登録
利用するには最初にPDIC1行形式の辞書ファイルを、このスクリプトが使用する
内部データベースに登録する必要があります。

PDICテキスト形式、またはPDIC1行テキスト形式辞書データファイルを用意し、
:CODRegistDict {辞書ファイルのパス} を実行してください。
CODRegistDictコマンドを実行すると、辞書データをデータベースファイルに
登録します。

英辞郎第三版の辞書ファイルを登録した場合、データベースファイルのサイズは約
170MByteほどになります。(Windows環境の場合)
GENE辞書ファイルを登録した場合のデータベースファイルのサイズは約5Mbyteほどで
す。

データベースファイルは~/.cursoroverdictionary_dbに作成されます。
(g:CODDatabasePathで変更可能)

注意点として、登録する辞書ファイルの文字コードとVim内部の文字エンコーディングが
一致している必要があります。
一致していない場合、文字化けしたり登録時にエラーが起こったりします。

2. 出力ウインドウを表示する
辞書データの登録が完了すれば、利用可能な状態になります。
CODOpenコマンドを実行すると、訳文を表示するための出力ウインドウが表示されます。
あとは、カーソルを移動するだけで、カーソル上にある単語の訳文が出力ウインドウ上
に表示されます。

==============================================================================
コマンド				*cod-function*

:CODOpen 				*:CODOpen*
	出力ウインドウを表示します。
	出力ウインドウがすでに表示されている場合は何もしません。

:CODClose				*:CODClose*
	出力ウインドウを閉じます。出力ウインドウがない場合には何もしません。

:CODToggle				*:CODToggle*
	出力ウインドウが表示されている時にはウインドウを閉じ、
	そうでないときには出力ウインドウを表示します。

:CODRegistDict[!]  {file} 		*:CODRegistDict*
	PDIC1行形式辞書ファイル{file}を読み込み、内部データベースを作成します。
	!を指定すると、既存の内部データベースに重複するキーワードが存在する場
	合に上書きします。
	!を指定せず、キーワードの重複があった場合にはエラーとなります。
	
	なお、登録するPDIC1行形式辞書ファイルの文字コードは、Vim内部で使われるエンコー
	ディング(encodingオプションの値)と一致している必要があります。

:CODSelected				*:CODSelected*
	選択したテキストを内部データベースを使って辞書検索します。
	複数の単語を選択して実行することにより、(単語ではなく)語句を検索することもできます。

:CODSearch {external-engine} [keyword]	*:CODSearch*
	[keyword]を内部データベースを使って辞書検索します。
	[keyword]を指定しなかった場合は、単語を入力するプロンプトが表示されま
	す。

:CODSelectedEx				*:CODSelectedEx*
	あらかじめ設定した外部検索エンジンを使って、選択したテキストを検索します。
	複数の単語を選択して実行することにより、(単語ではなく)語句を検索することもできます。

:CODSearchEx {external-engine} [keyword]	*:CODSearchEx*
	あらかじめ設定した外部検索エンジンを使って[keyword]を辞書検索します。
	[keyword]を指定しなかった場合は、単語を入力するプロンプトが表示されま
	す。

==============================================================================
グローバル変数				*cod-variables*

g:CODDatabasePath			*g:CODDatabasePath*
	内部データベースのパスを指定します。
	既定値は ~/.cursoroverdictionary_db です。

g:CODDirection				*g:CODDirection*
	出力ウインドウに表示する方向です。
	既定値は:rightbelowです。

g:CODWindowHeight			*g:CODWindowHeight*
	出力ウインドウ表示時の高さ(垂直分割時は幅)です。
	既定値は10です。

g:CODAdditionalStemmingPatterns		*g:CODAdditionalStemmingPatterns*
	ステミングの際の、独自に置換するパターンを指定するためのリストです。
	単語が、このリストのパターンと一致した場合に、置換後の単語で辞書検索を
	行います。

	例えば、
	g:CODAdditionalStemmingPatterns = [ ['ies$', 'y'] ]
	と指定してある場合、「studies」という単語は「study」に変換されます。

	ここで指定するパターンは、Pythonでの正規表現形式である必要があります。
	(Vim形式ではないので注意)

g:CODDisableCursorMoveUpdate		*g:CODDisableCursorMoveUpdate*
	カーソルオーバー辞書機能を利用しない場合に設定します。
	この変数を0以外の値に設定すると、カーソル移動時に
	出力ウインドウの内容を更新しなくなります。

g:CODPermanentCachePath			*g:CODPermanentCachePath*
	外部検索結果キャッシュの保存先パスを指定します。
	この変数を指定しない場合、キャッシュは一時ファイルに保存され、
	Vim終了時に破棄されます。

	この変数でキャッシュ保存先を指定することにより、
	次回以降のVim起動時にも、キャッシュを再利用することができるようになります。

	なお、この変数により保存先ファイルを指定した場合、
	そのファイルを削除しない限り、キャッシュは保持されます。
	また、キャッシュ内に一致する検索語がある場合にはキャッシュを優先します。
	そのため、外部から得られる内容に更新があった場合でも、
	それは反映されなくなります。
	
	なお、キャッシュ機能を利用するには|+python|が必要です。

==============================================================================
マッピング				*cod-mapping*

特にこのスクリプト側で設定しているマッピングはありません。

.vimrcで下記のように設定しておけば、選択した単語・語句を簡単に調べられるように
なって便利です。

	内部検索の場合
	vnoremap <silent> {任意のキー} :<c-u>CODSelected<cr>
	外部検索の場合
	vnoremap <silent> {任意のキー} :<c-u>CODSelectedEx {検索エンジン名}<cr>


あとは、CODToggleコマンドをマップしておけば、簡単に出力ウインドウを表示/非表示
にすることができます。

	nnoremap <silent> {任意のキー} :CODToggle<cr>

==============================================================================
外部検索エンジンの登録			*cod-register-external*

外部検索エンジンの登録は下記の関数を用いて行います。


cursoroverdictionary#add(name, url, urlenc, siteenc)
	外部検索エンジンを登録します。
	
	name		(文字列)
		検索エンジンの名前です。
		ここで指定した名前で検索エンジンの識別を行います。
	
	url		(文字列)
		アクセス先のURLを指定します。
		{word}と書くと、その部分が選択文字列に置換されます。
	
	urlenc		(文字列)
		URL文字列をエスケープする際のエンコード形式を指定します。
	
	siteenc		(文字列)
		取得した結果のエンコード形式を指定します。
	
	
	使用している環境にoperator-userスクリプトがインストールされている場合、
	外部検索エンジンを使った検索をオペレータとして実行することができます。

	「<Plug>(operator-cod-検索エンジン名)」という形式でマップが作成されます
	すので、これを任意のキーにマッピングすることによって、任意の外部検索を
	オペレータとして利用することができます。
	(|cod-operator|を参照してください。)

cursoroverdictionary#set_trim_pattern(name, start, end)
	取得した結果から、必要な部分を切り出すためのパターンを指定します。
	startのパターンに一致した位置の直後から、
	endのパターンに一致した直前の位置までのデータを
	結果表示のために使用します。
	
	name		(文字列)
		検索エンジンの名前です。
		cursoroverdictionary#add関数で登録した名前です。
	
	start		(文字列)
		開始位置のパターン

	end		(文字列)
		終了位置のパターン


cursoroverdictionary#enable_proxy(name, proxy)
	サイトにアクセスする際にプロキシサーバを経由する場合に、
	プロキシサーバを指定するために使用します。
	
	name		(文字列)
		検索エンジンの名前です。
		cursoroverdictionary#add関数で登録した名前です。
	
	proxy		(文字列)
		プロキシサーバを「ホスト名:ポート番号」の形式で指定します。
		例: proxyhost:8080

cursoroverdictionary#set_user_agent(name, agent-name)
	サイトにアクセスする際のUser-Agent文字列を指定します。
	このスクリプトでは、外部サイトへのアクセスする処理でcURLを
	使っていますが、アクセス先のサイトによってはUser-Agentの内容で
	処理を受け付けないところもあります。
	その場合は、この関数でUser-Agentを設定することによって、
	現象を回避することができます。
	
	この関数で指定しなかった場合は、cURLのデフォルトのUser-Agentを
	使用します。
	
	name		(文字列)
		検索エンジンの名前です。
		cursoroverdictionary#add関数で登録した名前です。
	
	agent-name	(文字列)
		User-Agent名を指定します。

cursoroverdictionary#set_default_engine(name)
	:CODSelectedコマンド、:CODSearchコマンドを使った検索では
	基本的には事前に登録した内部データベースを用いて検索を行いますが、
	ここでの検索で一致する結果が得られなかった場合に、
	cursoroverdictionary#set_default_engine関数で指定した外部検索エンジンを
	使って、検索を再試行することができます。
	
	name		(文字列)
		検索エンジンの名前です。
		cursoroverdictionary#add関数で登録した名前です。

例:
	" Wikipedia日本語版で検索
	call cursoroverdictionary#add("wp",
	\ "http://ja.wikipedia.org/wiki/{word}", "utf-8", "utf-8")
	call cursoroverdictionary#set_trim_pattern("wp",
	\ '<div id="bodyContent">', '\t\t</div>')

	" Wikipedia英語版で検索
	call cursoroverdictionary#add("wp_en", 
	\ "http://en.wikipedia.org/wiki/{word}", "utf-8", "utf-8")
	call cursoroverdictionary#set_trim_pattern("wp_en",
	\ '<div id="bodyContent">', '\t\t</div>')

	" 
	call cursoroverdictionary#set_default_engine("wp")

==============================================================================
オペレータ登録				*cod-operator*

このスクリプトは、operator-userのフレームワークの下で動作させることができま
す。
もし、使用している環境にoperator-userが入っていれば、外部検索機能をoperatorと
して実行することができます。

例:
.vimrcに下記のように設定したとします。

----
call cursoroverdictionary#add('wp', 'http://ja.wikipedia.org/wiki/{word}',
 \ 'utf-8', 'utf-8')
call cursoroverdictionary#set_trim_pattern('wp', '<div id="bodyContent">',
 \ '\t\t</div>')
map W <Plug>(operator-cod-wp)
----


すると、W +|{motion}|で、対象のテキストをWikipediaで検索し、
その結果を出力ウインドウで表示することができます。
また、ビジュアルモードで選択した状態からWキーで、選択したテキストを検索すること
もできます。


==============================================================================
CHANGELOG				*cod-changelog*

	0.0.9		2009-10-09	Add external search result cache.
	0.0.8		2009-10-05	bug fix for garbled message.
	0.0.7		2009-10-03	bug fix
	0.0.6		2009-10-02	minor change.
	0.0.5		2009-10-02	Several features added.
	0.0.4		2009-09-29	Add support for PDIC Text Format
	0.0.3		2009-03-12	bug fix.
	0.0.2		2009-02-03	minor change.
	0.0.1		2009-01-28	1st release.
==============================================================================
vim:ts=8 sw=8 noexpandtab tw=78 ft=help:

